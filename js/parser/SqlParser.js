/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,22],$V2=[1,19],$V3=[1,16],$V4=[1,17],$V5=[1,10],$V6=[1,11],$V7=[1,20],$V8=[1,26],$V9=[1,21],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,28],$Ve=[5,40,67],$Vf=[2,66],$Vg=[1,29],$Vh=[19,20,38,42,44,45,56,74,75,110,113,120,121,122,123],$Vi=[5,21,23,25,26,28,32,33,34,37,40,42,47,52,57,60,62,63,64,65,66,67,69,116,117,118,119],$Vj=[1,32],$Vk=[5,21,23,25,26,28,32,33,34,37,40,42,47,52,57,60,62,63,64,65,66,67,69,71,116,117,118,119],$Vl=[1,34],$Vm=[5,21,23,25,26,28,32,33,34,37,40,42,47,52,57,60,62,63,64,65,66,67,69,71,75,77,78,79,80,81,82,83,92,93,98,99,101,116,117,118,119],$Vn=[1,55],$Vo=[1,56],$Vp=[5,21,23,25,26,28,32,33,34,37,40,42,47,52,57,60,62,63,64,65,66,67,69,71,75,77,78,79,80,81,82,83,92,93,98,99,101,103,104,116,117,118,119],$Vq=[1,58],$Vr=[1,57],$Vs=[1,59],$Vt=[5,21,23,25,26,28,32,33,34,37,40,42,44,47,52,57,60,62,63,64,65,66,67,69,71,75,77,78,79,80,81,82,83,92,93,98,99,101,103,104,106,107,116,117,118,119],$Vu=[20,38,42,44,45,56,74,75,110,113,120,121,122,123],$Vv=[20,38,42,56,89,90,91,110,113,120,121,122,123],$Vw=[2,106],$Vx=[1,96],$Vy=[1,97],$Vz=[1,107],$VA=[1,108],$VB=[28,40],$VC=[5,21,23,25,26,37,40,67],$VD=[5,21,23,25,26,28,37,40,47,67],$VE=[2,47],$VF=[1,137],$VG=[1,138],$VH=[5,23,25,26,37,40,67],$VI=[1,163],$VJ=[1,161],$VK=[1,162],$VL=[5,21,23,25,26,28,37,40,47,52,53,58,60,62,63,64,65,66,67],$VM=[116,117,119],$VN=[5,25,26,37,40,67],$VO=[5,21,23,25,26,28,37,40,67],$VP=[2,54],$VQ=[1,182],$VR=[1,183],$VS=[1,184],$VT=[1,185],$VU=[1,186],$VV=[1,187],$VW=[5,21,23,25,26,28,37,40,52,60,62,63,64,65,66,67],$VX=[5,21,23,25,26,28,37,40,42,52,53,57,58,60,62,63,64,65,66,67],$VY=[1,190],$VZ=[5,25,26,28,37,40,67],$V_=[5,26,37,40,67],$V$=[5,21,23,25,26,28,37,40,52,53,60,62,63,64,65,66,67],$V01=[5,37,40,67],$V11=[5,28,37,40,67],$V21=[5,28,34,37,40,67],$V31=[1,227],$V41=[1,234],$V51=[28,40,42];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"expressionPlus":6,"selectClauseItem":7,"SELECT":8,"optDistinctClause":9,"optTopClause":10,"selectExprList":11,"optTableExprList":12,"optWhereClause":13,"optGroupByClause":14,"optHavingClause":15,"optOrderByClause":16,"optQueryHintsClause":17,"DISTINCT":18,"TOP":19,"NUMERIC":20,"WHERE":21,"expression":22,"GROUP_BY":23,"commaSepExpressionList":24,"HAVING":25,"ORDER_BY":26,"orderByList":27,"COMMA":28,"orderByListItem":29,"optOrderByOrder":30,"optOrderByNulls":31,"ASC":32,"DESC":33,"NULLS":34,"FIRST":35,"LAST":36,"OPTION":37,"LPAREN":38,"queryHintList":39,"RPAREN":40,"queryHint":41,"IDENTIFIER":42,"selectExpr":43,"STAR":44,"QUALIFIED_STAR":45,"optTableExprAlias":46,"FROM":47,"tableExprList":48,"tableExpr":49,"joinComponent":50,"optJoinModifier":51,"JOIN":52,"ON":53,"tableExprPart":54,"optTableHintsClause":55,"QUALIFIED_IDENTIFIER":56,"AS":57,"WITH":58,"tableHintList":59,"LEFT":60,"OUTER":61,"RIGHT":62,"FULL":63,"INNER":64,"CROSS":65,"NATURAL":66,"SET_OPERATOR":67,"andCondition":68,"LOGICAL_OR":69,"condition":70,"LOGICAL_AND":71,"operand":72,"conditionRightHandSide":73,"EXISTS":74,"LOGICAL_NOT":75,"compare":76,"CMP_EQUALS":77,"CMP_NOTEQUALS":78,"CMP_NOTEQUALS_BASIC":79,"CMP_GREATER":80,"CMP_GREATEROREQUAL":81,"CMP_LESS":82,"CMP_LESSOREQUAL":83,"rhsCompareTest":84,"rhsIsTest":85,"rhsInTest":86,"rhsLikeTest":87,"rhsBetweenTest":88,"ALL":89,"ANY":90,"SOME":91,"IS":92,"IN":93,"rhsInClause":94,"functionParam":95,"functionExpressionList":96,"optFunctionExpressionList":97,"LIKE":98,"BETWEEN":99,"summand":100,"CONCAT":101,"factor":102,"PLUS":103,"MINUS":104,"term":105,"DIVIDE":106,"MODULO":107,"value":108,"caseWhen":109,"CAST":110,"dataType":111,"optDataTypeLength":112,"CASE":113,"caseWhenList":114,"optCaseWhenElse":115,"END":116,"WHEN":117,"THEN":118,"ELSE":119,"STRING":120,"BOOLEAN":121,"NULL":122,"BIND":123,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"SELECT",18:"DISTINCT",19:"TOP",20:"NUMERIC",21:"WHERE",23:"GROUP_BY",25:"HAVING",26:"ORDER_BY",28:"COMMA",32:"ASC",33:"DESC",34:"NULLS",35:"FIRST",36:"LAST",37:"OPTION",38:"LPAREN",40:"RPAREN",42:"IDENTIFIER",44:"STAR",45:"QUALIFIED_STAR",47:"FROM",52:"JOIN",53:"ON",56:"QUALIFIED_IDENTIFIER",57:"AS",58:"WITH",60:"LEFT",61:"OUTER",62:"RIGHT",63:"FULL",64:"INNER",65:"CROSS",66:"NATURAL",67:"SET_OPERATOR",69:"LOGICAL_OR",71:"LOGICAL_AND",74:"EXISTS",75:"LOGICAL_NOT",77:"CMP_EQUALS",78:"CMP_NOTEQUALS",79:"CMP_NOTEQUALS_BASIC",80:"CMP_GREATER",81:"CMP_GREATEROREQUAL",82:"CMP_LESS",83:"CMP_LESSOREQUAL",89:"ALL",90:"ANY",91:"SOME",92:"IS",93:"IN",98:"LIKE",99:"BETWEEN",101:"CONCAT",103:"PLUS",104:"MINUS",106:"DIVIDE",107:"MODULO",110:"CAST",113:"CASE",116:"END",117:"WHEN",118:"THEN",119:"ELSE",120:"STRING",121:"BOOLEAN",122:"NULL",123:"BIND"},
productions_: [0,[3,2],[4,1],[7,10],[9,0],[9,1],[10,0],[10,2],[13,0],[13,2],[14,0],[14,2],[15,0],[15,2],[16,0],[16,2],[27,3],[27,1],[29,3],[30,0],[30,1],[30,1],[31,0],[31,2],[31,2],[17,0],[17,4],[39,3],[39,1],[41,2],[41,1],[11,1],[11,3],[43,1],[43,1],[43,2],[12,0],[12,2],[48,1],[48,3],[49,1],[49,4],[49,6],[50,3],[54,1],[54,1],[54,3],[46,0],[46,1],[46,2],[55,0],[55,4],[59,3],[59,1],[51,0],[51,1],[51,2],[51,1],[51,2],[51,1],[51,1],[51,1],[51,1],[6,3],[6,3],[6,1],[6,1],[22,1],[22,3],[68,1],[68,3],[70,1],[70,2],[70,4],[70,2],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[73,1],[73,1],[73,1],[73,1],[73,1],[84,2],[84,5],[84,5],[84,5],[85,2],[85,3],[85,4],[85,5],[86,4],[86,5],[94,1],[94,3],[24,3],[24,1],[95,1],[95,1],[95,1],[96,3],[96,1],[97,0],[97,1],[87,2],[87,3],[88,4],[88,5],[72,1],[72,3],[100,1],[100,3],[100,3],[102,1],[102,3],[102,3],[102,3],[105,1],[105,1],[105,1],[105,1],[105,3],[105,4],[105,4],[105,6],[111,2],[112,0],[112,3],[109,4],[114,5],[114,4],[115,0],[115,2],[108,1],[108,1],[108,1],[108,1],[108,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2: case 7: case 9: case 11: case 13: case 15: case 20: case 21: case 37: case 44: case 45: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 101: case 102: case 103: case 107: case 112: case 114: case 117: case 124: case 136: case 137: case 138: case 139: case 140: case 141:
 this.$ = $$[$0]; 
break;
case 3:
 this.$ = {nodeType: 'Select', distinct: $$[$0-8], top: $$[$0-7], columns: $$[$0-6], from: $$[$0-5], where:$$[$0-4], groupBy:$$[$0-3], having:$$[$0-2], orderBy:$$[$0-1], queryHints:$$[$0]}; 
break;
case 4:
 this.$ = false; 
break;
case 5:
 this.$ = true; 
break;
case 6: case 8: case 10: case 12: case 14: case 25: case 47: case 50: case 106: case 130: case 135:
 this.$ = null; 
break;
case 16: case 27: case 32: case 39: case 52: case 70: case 99: case 104:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 17: case 28: case 30: case 31: case 38: case 53: case 69: case 100: case 105:
 this.$ = [$$[$0]]; 
break;
case 18:
 this.$ = {expression:$$[$0-2], orderByOrder: $$[$0-1], orderByNulls: $$[$0]}; 
break;
case 19: case 54:
 this.$ = ''; 
break;
case 22:
 this.$ = '';
break;
case 23:
 this.$ = 'NULLS FIRST'; 
break;
case 24:
 this.$ = 'NULLS LAST'; 
break;
case 26: case 46: case 51: case 95: case 131:
 this.$ = $$[$0-1]; 
break;
case 29:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 33:
 this.$ = {nodeType: 'Column', value:'*'}; 
break;
case 34:
 this.$ = {nodeType: 'Column', value:$$[$0]}; 
break;
case 35:
 this.$ = {nodeType: 'Column', value:$$[$0-1], alias:$$[$0]}; 
break;
case 36:
 this.$ = []; 
break;
case 40:
 this.$ = {nodeType:'TableExpr', value: [$$[$0]]}; 
break;
case 41:
 this.$ = $$[$0-3]; $$[$0-3].value.push({nodeType:'TableExpr', value: $$[$0], modifier:$$[$0-2]}); 
break;
case 42:
 this.$ = $$[$0-5]; $$[$0-5].value.push({nodeType:'TableExpr', value: $$[$0-2], modifier:$$[$0-4], expression:$$[$0]}); 
break;
case 43:
 this.$ = {exprName: $$[$0-2], alias: $$[$0-1], tableHints: $$[$0]}; 
break;
case 48:
 this.$ = {value: $$[$0] }; 
break;
case 49:
 this.$ = {value: $$[$0], includeAs: 1}; 
break;
case 55:
 this.$ = 'LEFT'; 
break;
case 56:
 this.$ = 'LEFT OUTER'; 
break;
case 57:
 this.$ = 'RIGHT'; 
break;
case 58:
 this.$ = 'RIGHT OUTER'; 
break;
case 59:
 this.$ = 'FULL'; 
break;
case 60:
 this.$ = 'INNER'; 
break;
case 61:
 this.$ = 'CROSS'; 
break;
case 62:
 this.$ = 'NATURAL'; 
break;
case 63: case 64:
 this.$ = $$[$0-2]; $$[$0-2].push({nodeType:'SetOperator', value:$$[$0-1]}); $$[$0-2].push($$[$0]); 
break;
case 65: case 66:
 this.$ = [$$[$0]] 
break;
case 67:
 this.$ = {nodeType:'AndCondition', value: $$[$0]}; 
break;
case 68:
 this.$ = {nodeType:'OrCondition', left: $$[$0-2], right: $$[$0]}; 
break;
case 71:
 this.$ = {nodeType: 'Condition', value: $$[$0]}; 
break;
case 72:
 this.$ = {nodeType: 'BinaryCondition', left: $$[$0-1], right: $$[$0]}; 
break;
case 73:
 this.$ = {nodeType: 'ExistsCondition', value: $$[$0-1]}; 
break;
case 74:
 this.$ = {nodeType: 'NotCondition', value: $$[$0]}; 
break;
case 87:
 this.$ = {nodeType: 'RhsCompare', op: $$[$0-1], value: $$[$0] }; 
break;
case 88: case 89: case 90:
 this.$ = {nodeType: 'RhsCompareSub', op:$$[$0-4], kind: $$[$0-3], value: $$[$0-1] }; 
break;
case 91:
 this.$ = {nodeType: 'RhsIs', value: $$[$0]}; 
break;
case 92:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1}; 
break;
case 93:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], distinctFrom:1}; 
break;
case 94:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1, distinctFrom:1}; 
break;
case 96:
 this.$ = $$[$0-1]; $$[$0-1].not = 1; 
break;
case 97:
 this.$ = { nodeType: 'RhsInSelect', value: $$[$0]}; 
break;
case 98:
 this.$ = { nodeType: 'RhsInExpressionList', value: $$[$0]}; $$[$0].unshift($$[$0-2]); 
break;
case 108:
 this.$ = {nodeType: 'RhsLike', value: $$[$0]}; 
break;
case 109:
 this.$ = {nodeType: 'RhsLike', value: $$[$0], not:1}; 
break;
case 110:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0]}; 
break;
case 111:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0], not:1}; 
break;
case 113:
 this.$ = {nodeType:'Operand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 115: case 116:
 this.$ = {nodeType:'Summand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 118: case 119: case 120:
 this.$ = {nodeType:'Factor', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 121: case 122: case 123:
 this.$ = {nodeType: 'Term', value: $$[$0]}; 
break;
case 125:
 this.$ = {nodeType: 'Term', value: $$[$0-1]}; 
break;
case 126: case 127:
 this.$ = {nodeType: 'FunctionCall', name: $$[$0-3], args: $$[$0-1]}; 
break;
case 128:
 this.$ = {nodeType: 'Cast', expression:$$[$0-3], dataType:$$[$0-1]}; 
break;
case 129:
 this.$ = {name: $$[$0-1], len: $$[$0]}; 
break;
case 132:
 this.$ = {nodeType:'Case', clauses: $$[$0-2], else: $$[$0-1]}; 
break;
case 133:
 this.$ = $$[$0-4]; $$[$0-4].push({nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}); 
break;
case 134:
 this.$ = [{nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{1:[3]},{5:[1,27]},o([5,40],[2,2],{67:$Vd}),o($Ve,[2,65]),o($Ve,$Vf,{69:$Vg}),o($Vh,[2,4],{9:30,18:[1,31]}),o($Vi,[2,67],{71:$Vj}),o($Vk,[2,69]),o($Vk,[2,71],{73:33,84:35,85:36,86:37,87:38,88:39,76:40,75:[1,43],77:[1,46],78:[1,47],79:[1,48],80:[1,49],81:[1,50],82:[1,51],83:[1,52],92:[1,41],93:[1,42],98:[1,44],99:[1,45],101:$Vl}),{38:[1,53]},{20:$V1,38:$V2,42:$V3,56:$V4,70:54,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Vm,[2,112],{103:$Vn,104:$Vo}),o($Vp,[2,114],{44:$Vq,106:$Vr,107:$Vs}),o($Vt,[2,117]),o($Vt,[2,121]),o($Vt,[2,122],{38:[1,60]}),o($Vt,[2,123],{38:[1,61]}),o($Vt,[2,124]),{6:62,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{38:[1,63]},o($Vt,[2,137]),o($Vt,[2,138]),o($Vt,[2,139]),o($Vt,[2,140]),o($Vt,[2,141]),{114:64,117:[1,65]},{1:[2,1]},{7:66,8:$V0,20:$V1,22:67,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{20:$V1,38:$V2,42:$V3,56:$V4,68:68,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Vu,[2,6],{10:69,19:[1,70]}),o($Vh,[2,5]),{20:$V1,38:$V2,42:$V3,56:$V4,70:71,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Vk,[2,72]),{20:$V1,38:$V2,42:$V3,56:$V4,100:72,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Vk,[2,82]),o($Vk,[2,83]),o($Vk,[2,84]),o($Vk,[2,85]),o($Vk,[2,86]),{20:$V1,38:$V2,42:$V3,56:$V4,72:73,89:[1,74],90:[1,75],91:[1,76],100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{18:[1,79],20:$V1,38:$V2,42:$V3,56:$V4,72:77,75:[1,78],100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{38:[1,80]},{93:[1,81],98:[1,82],99:[1,83]},{20:$V1,38:$V2,42:$V3,56:$V4,72:84,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{20:$V1,38:$V2,42:$V3,56:$V4,72:85,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Vv,[2,75]),o($Vv,[2,76]),o($Vv,[2,77]),o($Vv,[2,78]),o($Vv,[2,79]),o($Vv,[2,80]),o($Vv,[2,81]),{4:86,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Vk,[2,74]),{20:$V1,38:$V2,42:$V3,56:$V4,102:87,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{20:$V1,38:$V2,42:$V3,56:$V4,102:88,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{20:$V1,38:$V2,42:$V3,56:$V4,105:89,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{20:$V1,38:$V2,42:$V3,56:$V4,105:90,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{20:$V1,38:$V2,42:$V3,56:$V4,105:91,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{20:$V1,22:95,38:$V2,40:$Vw,42:$V3,44:$Vx,45:$Vy,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,95:94,96:93,97:92,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{20:$V1,22:95,38:$V2,40:$Vw,42:$V3,44:$Vx,45:$Vy,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,95:94,96:93,97:98,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{40:[1,99],67:$Vd},{20:$V1,22:100,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{115:101,116:[2,135],117:[1,102],119:[1,103]},{20:$V1,22:104,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Ve,[2,63]),o($Ve,[2,64],{69:$Vg}),o($Vi,[2,68],{71:$Vj}),{11:105,20:$V1,22:109,38:$V2,42:$V3,43:106,44:$Vz,45:$VA,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{20:[1,110]},o($Vk,[2,70]),o($Vm,[2,113],{103:$Vn,104:$Vo}),o($Vk,[2,87],{101:$Vl}),{38:[1,111]},{38:[1,112]},{38:[1,113]},o($Vk,[2,91],{101:$Vl}),{18:[1,115],20:$V1,38:$V2,42:$V3,56:$V4,72:114,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{47:[1,116]},{4:118,6:3,7:4,8:$V0,20:$V1,22:119,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,94:117,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{38:[1,120]},{20:$V1,38:$V2,42:$V3,56:$V4,72:121,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{20:$V1,38:$V2,42:$V3,56:$V4,72:122,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Vk,[2,108],{101:$Vl}),{71:[1,123],101:$Vl},{40:[1,124]},o($Vp,[2,115],{44:$Vq,106:$Vr,107:$Vs}),o($Vp,[2,116],{44:$Vq,106:$Vr,107:$Vs}),o($Vt,[2,118]),o($Vt,[2,119]),o($Vt,[2,120]),{40:[1,125]},{28:[1,126],40:[2,107]},o($VB,[2,105]),o($VB,[2,101],{69:$Vg}),o($VB,[2,102]),o($VB,[2,103]),{40:[1,127]},o($Vt,[2,125]),{57:[1,128],69:$Vg},{116:[1,129]},{20:$V1,22:130,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{20:$V1,22:131,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{69:$Vg,118:[1,132]},o($VC,[2,36],{12:133,28:[1,134],47:[1,135]}),o($VD,[2,31]),o($VD,[2,33]),o($VD,[2,34]),o($VD,$VE,{46:136,42:$VF,57:$VG,69:$Vg}),o($Vu,[2,7]),{4:139,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{4:140,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{4:141,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Vk,[2,92],{101:$Vl}),{47:[1,142]},{20:$V1,38:$V2,42:$V3,56:$V4,72:143,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{40:[1,144]},{40:[2,97]},o([40,67],$Vf,{28:[1,145],69:$Vg}),{4:118,6:3,7:4,8:$V0,20:$V1,22:119,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,94:146,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Vk,[2,109],{101:$Vl}),{71:[1,147],101:$Vl},{20:$V1,38:$V2,42:$V3,56:$V4,72:148,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Vk,[2,73]),o($Vt,[2,126]),{20:$V1,22:95,38:$V2,42:$V3,44:$Vx,45:$Vy,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,95:149,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Vt,[2,127]),{42:[1,151],111:150},o($Vt,[2,132]),{69:$Vg,118:[1,152]},{69:$Vg,116:[2,136]},{20:$V1,22:153,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($VH,[2,8],{13:154,21:[1,155]}),{20:$V1,22:109,38:$V2,42:$V3,43:156,44:$Vz,45:$VA,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{38:$VI,42:$VJ,48:157,49:158,50:159,54:160,56:$VK},o($VD,[2,35]),o($VL,[2,48]),{42:[1,164]},{40:[1,165]},{40:[1,166]},{40:[1,167]},{20:$V1,38:$V2,42:$V3,56:$V4,72:168,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Vk,[2,93],{101:$Vl}),o($Vk,[2,95]),{20:$V1,22:170,24:169,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{40:[1,171]},{20:$V1,38:$V2,42:$V3,56:$V4,72:172,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($Vk,[2,110],{101:$Vl}),o($VB,[2,104]),{40:[1,173]},{38:[1,175],40:[2,130],112:174},{20:$V1,22:176,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($VM,[2,134],{69:$Vg}),o($VN,[2,10],{14:177,23:[1,178]}),{20:$V1,22:179,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($VD,[2,32]),o($VC,[2,37],{28:[1,180]}),o($VO,[2,38],{51:181,52:$VP,60:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV}),o($VW,[2,40]),o([5,21,23,25,26,28,37,40,52,53,58,60,62,63,64,65,66,67],$VE,{46:188,42:$VF,57:$VG}),o($VX,[2,44]),o($VX,[2,45]),{4:189,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($VL,[2,49]),o($Vk,[2,88]),o($Vk,[2,89]),o($Vk,[2,90]),o($Vk,[2,94],{101:$Vl}),{28:$VY,40:[2,98]},o($VZ,[2,100],{69:$Vg}),o($Vk,[2,96]),o($Vk,[2,111],{101:$Vl}),o($Vt,[2,128]),{40:[2,129]},{20:[1,191]},o($VM,[2,133],{69:$Vg}),o($V_,[2,12],{15:192,25:[1,193]}),{20:$V1,22:170,24:194,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($VH,[2,9],{69:$Vg}),{38:$VI,42:$VJ,49:195,50:159,54:160,56:$VK},{52:[1,196]},{52:[2,55],61:[1,197]},{52:[2,57],61:[1,198]},{52:[2,59]},{52:[2,60]},{52:[2,61]},{52:[2,62]},o($V$,[2,50],{55:199,58:[1,200]}),{40:[1,201]},{20:$V1,22:202,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{40:[1,203]},o($V01,[2,14],{16:204,26:[1,205]}),{20:$V1,22:206,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($VN,[2,11],{28:$VY}),o($VO,[2,39],{51:181,52:$VP,60:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV}),{38:$VI,42:$VJ,50:207,54:160,56:$VK},{52:[2,56]},{52:[2,58]},o($V$,[2,43]),{38:[1,208]},o($VX,[2,46]),o($VZ,[2,99],{69:$Vg}),{40:[2,131]},o($Ve,[2,25],{17:209,37:[1,210]}),{20:$V1,22:213,27:211,29:212,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($V_,[2,13],{69:$Vg}),o($VW,[2,41],{53:[1,214]}),{42:[1,216],59:215},o($Ve,[2,3]),{38:[1,217]},o($V01,[2,15],{28:[1,218]}),o($V11,[2,17]),o($V21,[2,19],{30:219,32:[1,220],33:[1,221],69:$Vg}),{20:$V1,22:222,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},{28:[1,224],40:[1,223]},o($VB,[2,53]),{39:225,41:226,42:$V31},{20:$V1,22:213,29:228,38:$V2,42:$V3,56:$V4,68:7,70:8,72:9,74:$V5,75:$V6,100:12,102:13,105:14,108:15,109:18,110:$V7,113:$V8,120:$V9,121:$Va,122:$Vb,123:$Vc},o($V11,[2,22],{31:229,34:[1,230]}),o($V21,[2,20]),o($V21,[2,21]),o($VW,[2,42],{69:$Vg}),o($V$,[2,51]),{42:[1,231]},{28:[1,233],40:[1,232]},o($VB,[2,28],{42:$V41}),o($V51,[2,30]),o($V11,[2,16]),o($V11,[2,18]),{35:[1,235],36:[1,236]},o($VB,[2,52]),o($Ve,[2,26]),{41:237,42:$V31},o($V51,[2,29]),o($V11,[2,23]),o($V11,[2,24]),o($VB,[2,27],{42:$V41})],
defaultActions: {27:[2,1],118:[2,97],174:[2,129],184:[2,59],185:[2,60],186:[2,61],187:[2,62],197:[2,56],198:[2,58],203:[2,131]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:return 56
break;
case 2:return 45
break;
case 3:/* skip whitespace */
break;
case 4:return 8
break;
case 5:return 19
break;
case 6:return 47
break;
case 7:return 21
break;
case 8:return 18
break;
case 9:return 99
break;
case 10:return 23
break;
case 11:return 25
break;
case 12:return 26
break;
case 13:return 67
break;
case 14:return 28
break;
case 15:return 103
break;
case 16:return 104
break;
case 17:return 106
break;
case 18:return 44
break;
case 19:return 107
break;
case 20:return 77
break;
case 21:return 78
break;
case 22:return 79
break;
case 23:return 81
break;
case 24:return 80
break;
case 25:return 83
break;
case 26:return 82
break;
case 27:return 38
break;
case 28:return 40
break;
case 29:return 101
break;
case 30:return 57
break;
case 31:return 89
break;
case 32:return 90
break;
case 33:return 91
break;
case 34:return 74
break;
case 35:return 92
break;
case 36:return 93
break;
case 37:return 53
break;
case 38:return 71
break;
case 39:return 69
break;
case 40:return 75
break;
case 41:return 64
break;
case 42:return 61
break;
case 43:return 52
break;
case 44:return 60
break;
case 45:return 62
break;
case 46:return 63
break;
case 47:return 66
break;
case 48:return 65
break;
case 49:return 113
break;
case 50:return 117
break;
case 51:return 118
break;
case 52:return 119
break;
case 53:return 116
break;
case 54:return 98
break;
case 55:return 32
break;
case 56:return 33
break;
case 57:return 34
break;
case 58:return 35
break;
case 59:return 36
break;
case 60:return 37
break;
case 61:return 58
break;
case 62:return 110
break;
case 63:return 120
break;
case 64:return 122
break;
case 65:return 121
break;
case 66:return 20
break;
case 67:return 42
break;
case 68:return 123
break;
case 69:return 5
break;
case 70:return 'INVALID'
break;
}
},
rules: [/^(?:[/][*](.|\n)*?[*][/])/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.\*)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:TOP\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DISTINCT\b)/i,/^(?:BETWEEN\b)/i,/^(?:GROUP BY\b)/i,/^(?:HAVING\b)/i,/^(?:ORDER BY\b)/i,/^(?:(UNION[ ]ALL|UNION|INTERSECT|EXCEPT))/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:AS\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:SOME\b)/i,/^(?:EXISTS\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:INNER\b)/i,/^(?:OUTER\b)/i,/^(?:JOIN\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:FULL\b)/i,/^(?:NATURAL\b)/i,/^(?:CROSS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:LIKE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:NULLS\b)/i,/^(?:FIRST\b)/i,/^(?:LAST\b)/i,/^(?:OPTION\b)/i,/^(?:WITH\b)/i,/^(?:CAST\b)/i,/^(?:N?['](\\.|[^'])*['])/i,/^(?:NULL\b)/i,/^(?:(true|false))/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[?])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();